package com.ys.demo;

interface Shape{
    public abstract void write();
    void draw();

    public static final int a = 1;
    int b = 2;
}
interface Animal{
    void run();
}
class Cycle implements Shape,Animal{
    @Override
    public void write() {

    }

    @Override
    public void draw() {
        System.out.println("yuan");
    }

    @Override
    public void run() {

    }
}
public class TestDemo{
    public static void main(String[] args) {
        Shape shape = new Cycle();
        shape.draw();
    }
}


//
//abstract class Shape{
//    public abstract void draw();
//    void ride(){
//        System.out.println("xie");
//    }
//}
//class Cycle extends Shape{
//    @Override
//    public void draw() {
//        System.out.println("yuan");
//    }
//}
//
//public class TestDemo{
//    public static void drawMap(Shape shape){
//        shape.draw();
//        shape.ride();
//    }
//    public static void main(String[] args) {
//        Shape shape = new Cycle();
//        drawMap(shape);
//    }
//}
//
//class Shape{
//    void draw(){
//
//    }
//}
//class Cycle extends Shape{
//    @Override
//    void draw() {
//        super.draw();
//    }
//}
//class Rect extends Shape{
//    @Override
//    void draw() {
//        super.draw();
//    }
//}




//abstract class Shape {
//    void draw() {
//
//    }
//}
//class Cycle extends Shape{
//    @Override
//    public void draw() {
//        System.out.println("这是一个圆！");
//    }
//}
//
//class Rect extends Shape{
//    @Override
//    public void draw() {
//        System.out.println("这是一个矩形！");
//    }
//}
//
//class Flower extends Shape {
//    @Override
//    public void draw() {
//        System.out.println("我想画一朵❀！");
//    }
//}
//
//class Triangle extends Shape {
//    @Override
//    public void draw() {
//        System.out.println("△");
//    }
//}
//
//public class TestDemo {
//    //类的调用者
//    public static void drawMap(Shape shape) {
//        shape.draw();
//    }
//    public static void main(String[] args) {
////        Shape shape1 = new Cycle();
////        //shape1.draw();
////        Shape shape2 = new Rect();
////        //shape2.draw();
////        drawMap(shape1);
////        drawMap(shape2);
////        Shape shape3 = new Flower();
////        drawMap(shape3);
//
//        Flower flower = new Flower();
//        drawMap(flower);
//        Triangle triangle = new Triangle();
//        drawMap(triangle);
//
//    }
//
//    public static void main3(String[] args) {
//        Shape[] shapes = {new Cycle(), new Rect(),new Flower(),new Triangle()};
//        for (Shape shape : shapes) {
//            shape.draw();
//        }
//    }
//    public static void main2(String[] args) {
//        Rect rect = new Rect();
//        Cycle cycle = new Cycle();
//        Flower flower = new Flower();
//        String[] shapes = {"cycle", "rect", "flower"};
//        for (String shape : shapes) {
//            if (shape.equals("cycle")) {
//                cycle.draw();
//            } else if (shape.equals("rect")) {
//                rect.draw();
//            } else if (shape.equals("flower")) {
//                flower.draw();
//            }
//        }
//    }
//
//
//    public static void main1(String[] args) {
//        Shape shape1 = new Cycle();
//        //shape1.draw();
//        Shape shape2 = new Rect();
//        //shape2.draw();
//        drawMap(shape1);
//        drawMap(shape2);
//        Shape shape3 = new Flower();
//        drawMap(shape3);
//
//        Flower flower = new Flower();
//        drawMap(flower);
//    }
//}
