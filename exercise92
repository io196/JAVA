/**
 * 单链表代码实现
 */

class Node {
    public int data;
    public Node next;
    public Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class MyLinedList {
    public Node head;

    public MyLinedList(){
        this.head = null;
    }

    public void addFirst(int data){   //头插法
        Node node = new Node(data);
        if (this.head == null){
            this.head = node;
            return;
        }
        node.next = this.head;
        this.head = node;
    }
    public void addLast(int data){   //尾插法
        Node node = new Node(data);
        if (this.head == null){
            this.head = node;
            return;
        }
        Node cur = this.head;
        while (cur.next != null){
            cur = cur.next;
        }
        cur.next = node;
    }
    public int size(){     //求得单链表的长度
        Node cur = this.head;
        int count = 0;
        while (cur != null){
            cur = cur.next;
            count++;
        }
        return count;
    }
    private Node findIndex(int index){
        Node cur = this.head;
        int count = 0;
        while (count<index-1){
            cur = cur.next;
            count++;
        }
        return cur;
    }
    public void addIndex(int index,int data){  //任意位置插入,第一个数据节点为0号下标
        if (index<0 || index>size()){
            throw new RuntimeException("index位置不合法");
        }
        if (index == 0){
            addFirst(data);
        }
        if (index == size()){
            addLast(data);
        }
        Node prev = findIndex(index);
        Node node = new Node(data);
        node.next = prev.next;
        prev.next = node;
    }
    public boolean contains(int key){        //查找关键字key是否在单链表当中
        Node cur = this.head;
        while (cur != null){
            if (cur.data == key){
                return true;
            }
            cur = cur.next;
        }
        return false;
    }
    private Node findPrev(int key) {
        Node prev = this.head;
        while (prev.next != null) {
            if(prev.next.data == key) {
                return prev;
            }
            prev = prev.next;
        }
        return null;
    }
    public void remove(int key){              //删除第一次出现关键字为key的节点
        if(this.head.data == key) {
            this.head = this.head.next;
            return;
        }
        Node prev = findPrev(key);
        if(prev == null) {
            System.out.println("没有这个节点！");
            return;
        }
        Node del = prev.next;
        prev.next = del.next;
    }
    public void removeAllKey(int key){           //删除所有值为key的节点
        Node prev = this.head;
        Node cur = this.head.next;
        while(cur != null) {
            if(cur.data == key) {
                prev.next = cur.next;
                cur = cur.next;
            }else {
                prev = prev.next;
                cur = cur.next;
            }
        }
        if(this.head.data == key) {
            this.head = this.head.next;
        }
    }
    public void display(){
        Node cur = this.head;
        while (cur != null){
            System.out.print(cur.data + " ");
            cur = cur.next;
        }
        System.out.println();
    }
    public void clear(){
        //this.head = null;
        while (this.head.next!=null) {
            Node del = this.head.next;
            this.head.next = del.next;
        }
        this.head = null;
    }
}

//=====================================
/**
 * 单链表代码测试
 */

public class TestDemo {
    public static void main(String[] args) {
        MyLinedList myLinedList = new MyLinedList();
        myLinedList.addFirst(1);
        myLinedList.addFirst(2);
        myLinedList.addFirst(3);
        myLinedList.addFirst(4);
        myLinedList.addLast(0);
        myLinedList.addIndex(2,2);

        myLinedList.display();
        System.out.println(myLinedList.size());
        System.out.println(myLinedList.contains(8));
//        myLinedList.remove(2);
        myLinedList.removeAllKey(2);
        myLinedList.display();
        myLinedList.clear();
        myLinedList.display();

    }
}
