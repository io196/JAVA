package Sort;

import java.util.Arrays;
/*快速排序   不稳定排序
时间复杂度:
    最好 : O(n*log n)
    平均 : O(n*log n)
    最坏 : O(n^2)
空间复杂度:
    最好 : O(log n)
    平均 : O(log n)
    最坏 : O(n)
* */
public class quickSort {
    public static void sort(int[] arr) {
        quickSortHelper(arr, 0, arr.length - 1);
    }

    private static void quickSortHelper(int[] arr, int left, int right) {
        if (left >= right) {
            return;
        }
        int index = partition(arr, left, right);
        quickSortHelper(arr, left, index - 1);
        quickSortHelper(arr, index + 1, right);
    }

    private static int partition(int[] arr, int left, int right) {
        int baseValue = arr[right];
        int i = left;
        int j = right;
        while (i < j) {
            while (i < j && arr[i] <= baseValue) {
                i++;
            }
            while (i < j && arr[j] >= baseValue) {
                j--;
            }
            if (i < j) {
                swap(arr, i, j);
            }
        }
        swap(arr, i, right);
        return i;
    }

    private static void swap(int[] arr, int i, int j) {
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }


    public static void main(String[] args) {
        int[] arr = {9,5,2,7,3,6,8,9,5,2,7,3,6,8,9};
        System.out.println(Arrays.toString(arr));
        sort(arr);
        System.out.println(Arrays.toString(arr));;
    }
}
