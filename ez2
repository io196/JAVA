public class TestTree {
    static class Node{
        public char val;
        public Node left;
        public Node right;

        public Node(char val) {
            this.val = val;
            this.left = null;
            this.right = null;
        }

        @Override
        public String toString() {
            return "Node{" +
                    "val= " + val +
                    '}';
        }
    }

    //自建二叉树，以便测试
    static Node build(){
        Node A = new Node('A');
        Node B = new Node('B');
        Node C = new Node('C');
        Node D = new Node('D');
        Node E = new Node('E');
        Node F = new Node('F');
        Node G = new Node('G');
        Node H = new Node('H');
        A.left = B;
        A.right = C;
        B.left = D;
        B.right = E;
        C.left = F;
        C.right = G;
        E.right = H;

        return A;
    }

    //先序遍历
    public static void preOrder(Node root){
        if (root == null){
            return;
        }
        System.out.print(root.val + " ");
        preOrder(root.left);
        preOrder(root.right);
    }

    //中序遍历
    public static void inOrder(Node root){
        if (root == null){
            return;
        }
        preOrder(root.left);
        System.out.print(root.val + " ");
        preOrder(root.right);
    }

    //后续遍历
    public static void postOrder(Node root){
        if (root == null){
            return;
        }
        postOrder(root.left);
        postOrder(root.right);
        System.out.print(root.val + " ");
    }

    //得到一个树的节点个数 = 根节点个数（1） + 左子树节点个数 + 右子树节点个数
    public static int size(Node root){
        if (root == null){
            return 0;
        }
        return 1 + size(root.left) + size(root.right);
    }

    //得到一个树的叶子节点个数
    public static int leafSize(Node root){
        if (root == null){
            return 0;
        }
        if (root.left == null && root.right == null){
            return 1;
        }
        return leafSize(root.left) + leafSize(root.right);
    }

    //得到一个树的第k层节点个数 = 左子树的 k-1 层节点个数 + 右子树的 k-1 层节点个数
    public static int kLevelSize(Node root, int k ){
        if (root == null || k < 1){
            return 0;
        }
        if (k == 1){
            return 1;
        }
        return kLevelSize(root.left, k - 1) + kLevelSize(root.right, k - 1);
    }

    //查找树中是否有所要寻找的节点
    public static Node find(Node root, char toFind){
        if (root == null){
            return null;
        }
        if (root.val == toFind){
            return root;
        }
        Node result = find(root.left, toFind);
        if (result != null){
            return result;
        }
        return find(root.right, toFind);
    }

    public static void main(String[] args) {
        Node root = build();
        preOrder(root);
        System.out.println();
        inOrder(root);
        System.out.println();
        postOrder(root);
        System.out.println();
        System.out.println(size(root));
        System.out.println(leafSize(root));
        System.out.println(kLevelSize(root,3));
        System.out.println(find(root,'H'));
    }
}
