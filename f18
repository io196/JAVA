//链式A+B
import java.util.*;
// 有两个用链表表示的整数，每个结点包含一个数位。
// 这些数位是反向存放的，也就是个位排在链表的首部。
// 编写函数对这两个整数求和，并用链表形式返回结果。
// 给定两个链表ListNode* A，ListNode* B，请返回A+B的结果(ListNode*)。
public class Main_252 {
    public class ListNode {
        int val;
        ListNode next = null;
        ListNode(int val) {
            this.val = val;
        }
    }
    public class Plus {
        public ListNode plusAB(ListNode a, ListNode b) {
            if(a == null)
                return b;
            if(b == null)
                return a;
            ListNode head = new ListNode(0);
            ListNode p = head;
            ListNode p1 = a, p2 = b;
            int sum = 0;
            while(p1 != null || p2 != null || sum != 0){
                if(p1 != null){
                    sum += p1.val;
                    p1 = p1.next;
                }
                if(p2 != null){
                    sum += p2.val;
                    p2 = p2.next;
                }
                p.next = new  ListNode(sum % 10);
                sum = sum / 10;
                p = p.next;
            }
            return head.next;
        }
    }
}
//
//    class ListNode {
//        int val;
//        ListNode next = null;
//
//        ListNode(int val) {
//            this.val = val;
//        }
//    }
//
//    public class Plus {
//        public ListNode plusAB(ListNode a, ListNode b) {
//            // write code here
//            int lena = length(a);
//            int lenb = length(b);
//            int numa = 0;
//            int numb = 0;
//            for (int i = 0; i < lena; i++) {
//                numa = numa + a.val * 10^i;
//                a = a.next;
//            }
//            for (int i = 0; i < lenb; i++) {
//                numb = numb + b.val * 10^i;
//                b = b.next;
//            }
//            int sum = numa + numb;
////            System.out.println(sum);
//
//
//        }
//
//        private int length(ListNode a) {
//            int count = 1;
//            while (a.next != null) {
//                count++;
//                a = a.next;
//            }
//            return count;
//        }
//    }
//}
