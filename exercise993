import java.util.ArrayList;
import java.util.List;

public class Solution {
    public boolean canThreePartsEqualSum(int[] A) {
        int sum = 0;
        for (int i : A){
            sum = sum + i;
        }
        if (sum%3!=0 || A.length<3){
            return false;
        }
        sum = sum / 3;
        int cur = 0;
        int count = 0;
        for (int i=0; i<A.length-1; i++) {
            cur = cur +A[i];
            if (cur == sum){
                cur = 0;
                count++;
                if (count == 2){
                    return true;
                }
            }
        }
        return false;
    }
//    给你一个 m 行 n 列的二维网格 grid 和一个整数 k。你需要将 grid 迁移 k 次。
//
//    每次「迁移」操作将会引发下述活动：
//
//    位于 grid[i][j] 的元素将会移动到 grid[i][j + 1]。
//    位于 grid[i][n - 1] 的元素将会移动到 grid[i + 1][0]。
//    位于 grid[m - 1][n - 1] 的元素将会移动到 grid[0][0]。
//    请你返回 k 次迁移操作后最终得到的 二维网格。
    public List<List<Integer>> shiftGrid(int[][]grid, int k ){
        int[] nums = new int[grid.length*grid[0].length];
        for (int i=0; i<grid.length; i++){
            for (int j=0; j<grid[0].length; j++){
                k = k%nums.length;
                nums[k] = grid[i][j];
                k++;
            }
        }
        int a = 0;
        List<List<Integer>> lists = new ArrayList<>(grid.length);
        for (int i=0; i<grid.length; i++){
            List<Integer> list1 = new ArrayList<>(grid[0].length);
            for (int j=0; j<grid[0].length; j++){
                list1.add(nums[a]);
                a++;
            }
            lists.add(list1);
        }
        return lists;
    }
//        for(int i = 0, iMax = grid.length;i < iMax;i++) {
//            for(int j = 0, jMax = grid[0].length;j < jMax;j++) {
//                k %= nums.length;
//                nums[k++] = grid[i][j];
//            }
//        }
//        k = 0;
//        List<List<Integer>> lists = new ArrayList<>(grid.length);
//        for(int i = 0, iMax = grid.length;i < iMax;i++) {
//            List<Integer> tempList = new ArrayList<>(grid[0].length);
//            for(int j = 0, jMax = grid[0].length;j < jMax;j++) {
//                tempList.add(nums[k++]);
//            }
//            lists.add(tempList);
//        }
//        return lists;
//    }
}
